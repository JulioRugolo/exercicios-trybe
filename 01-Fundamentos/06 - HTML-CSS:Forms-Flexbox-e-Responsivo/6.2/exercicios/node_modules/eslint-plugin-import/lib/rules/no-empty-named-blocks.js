'use strict';var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();var _docsUrl = require('../docsUrl');var _docsUrl2 = _interopRequireDefault(_docsUrl);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

function getEmptyBlockRange(tokens, index) {
  var token = tokens[index];
  var nextToken = tokens[index + 1];
  var prevToken = tokens[index - 1];
  var start = token.range[0];
  var end = nextToken.range[1];

  // Remove block tokens and the previous comma
  if (prevToken.value === ',' || prevToken.value === 'type' || prevToken.value === 'typeof') {
    start = prevToken.range[0];
  }

  return [start, end];
}

module.exports = {
  meta: {
    type: 'suggestion',
    docs: {
      category: 'Helpful warnings',
      description: 'Forbid empty named import blocks.',
      url: (0, _docsUrl2['default'])('no-empty-named-blocks') },

    fixable: 'code',
    schema: [],
    hasSuggestions: true },


  create: function () {function create(context) {
      return {
        Program: function () {function Program(node) {
            node.tokens.forEach(function (token, idx) {
              var nextToken = node.tokens[idx + 1];

              if (nextToken && token.value === '{' && nextToken.value === '}') {
                var hasOtherIdentifiers = node.tokens.some(function (token) {return (
                    token.type === 'Identifier' &&
                    token.value !== 'from' &&
                    token.value !== 'type' &&
                    token.value !== 'typeof');});


                // If it has no other identifiers it's the only thing in the import, so we can either remove the import
                // completely or transform it in a side-effects only import
                if (!hasOtherIdentifiers) {
                  context.report({
                    node: node,
                    message: 'Unexpected empty named import block',
                    suggest: [
                    {
                      desc: 'Remove unused import',
                      fix: function () {function fix(fixer) {
                          // Remove the whole import
                          return fixer.remove(node);
                        }return fix;}() },

                    {
                      desc: 'Remove empty import block',
                      fix: function () {function fix(fixer) {
                          // Remove the empty block and the 'from' token, leaving the import only for its side
                          // effects, e.g. `import 'mod'`
                          var sourceCode = context.getSourceCode();
                          var fromToken = node.tokens.find(function (t) {return t.value === 'from';});
                          var importToken = node.tokens.find(function (t) {return t.value === 'import';});
                          var hasSpaceAfterFrom = sourceCode.isSpaceBetween(fromToken, sourceCode.getTokenAfter(fromToken));
                          var hasSpaceAfterImport = sourceCode.isSpaceBetween(importToken, sourceCode.getTokenAfter(fromToken));var _getEmptyBlockRange =

                          getEmptyBlockRange(node.tokens, idx),_getEmptyBlockRange2 = _slicedToArray(_getEmptyBlockRange, 1),start = _getEmptyBlockRange2[0];var _fromToken$range = _slicedToArray(
                          fromToken.range, 2),end = _fromToken$range[1];
                          var range = [start, hasSpaceAfterFrom ? end + 1 : end];

                          return fixer.replaceTextRange(range, hasSpaceAfterImport ? '' : ' ');
                        }return fix;}() }] });



                } else {
                  context.report({
                    node: node,
                    message: 'Unexpected empty named import block',
                    fix: function () {function fix(fixer) {
                        return fixer.removeRange(getEmptyBlockRange(node.tokens, idx));
                      }return fix;}() });

                }
              }
            });
          }return Program;}() };

    }return create;}() };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,